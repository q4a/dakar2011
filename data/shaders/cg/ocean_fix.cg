#include "common.cg"

struct a2v {
	float4 Position : POSITION;   // in object space
	float2 TexCoord : TEXCOORD0;
};

struct v2f {
	float4 Position  : POSITION;  // in clip space
	float3 rotMatrix1 : TEXCOORD0; // first row of the 3x3 transform from tangent to obj space
	float3 rotMatrix2 : TEXCOORD1; // second row of the 3x3 transform from tangent to obj space
	float3 rotMatrix3 : TEXCOORD2; // third row of the 3x3 transform from tangent to obj space

	float2 bumpCoord0 : TEXCOORD3;
	float2 bumpCoord1 : TEXCOORD4;
	float2 bumpCoord2 : TEXCOORD5;

	float3 eyeVector  : TEXCOORD6;
//        float4 oTexCoordProj : TEXCOORD7;
};

// wave functions

struct Wave {
  float freq;  // 2*PI / wavelength
  float amp;   // amplitude
  float phase; // speed * 2*PI / wavelength
  float2 dir;
};

v2f main_v(a2v IN,
             uniform float4x4 mWorldViewProj,
             uniform float tick,
//             uniform float4x4 mTextureMatrix,
//		uniform float4x4 WorldViewProj,
		uniform float3 eyePosition
//		uniform float time,
        )
{
	v2f OUT;

const float BumpScale = 0.5;
const float2 textureScale = float2(1.2, 1.0);
//const float2 bumpSpeed = float2(0.015, 0.005);
const float2 bumpSpeed = float2(0.015, 0.005);
//const float waveFreq = 0.028;
const float waveFreq = 0.03;
const float waveAmp = 1.8;
const float time = tick * 0.0005;

	#define NWAVES 2
	Wave wave[NWAVES] = {
		{ 1.0, 1.0, 0.5, float2(-1, 0) },
		{ 2.0, 0.5, 1.7, float2(-0.7, 0.7) }
	};

    wave[0].freq = waveFreq;
    wave[0].amp = waveAmp;

    wave[1].freq = waveFreq * 3.0;
    wave[1].amp = waveAmp * 0.33;

    float4 P = IN.Position;

	// sum waves
	float ddx = 0.0, ddy = 0.0;
	float deriv;
	float angle;

	// wave synthesis using two sine waves at different frequencies and phase shift
	for(int i = 0; i<NWAVES; ++i)
	{
		angle = dot(wave[i].dir, P.xz) * wave[i].freq + time * wave[i].phase;
//		P.y += wave[i].amp * sin( angle );
		// calculate derivate of wave function
		deriv = wave[i].freq * wave[i].amp * cos(angle);
		ddx -= deriv * wave[i].dir.x;
		ddy -= deriv * wave[i].dir.y;
	}

	// compute the 3x3 tranform from tangent space to object space
	// first rows are the tangent and binormal scaled by the bump scale

	OUT.rotMatrix1.xyz = BumpScale * normalize(float3(1, ddy, 0)); // Binormal
	OUT.rotMatrix2.xyz = BumpScale * normalize(float3(0, ddx, 1)); // Tangent
	OUT.rotMatrix3.xyz = normalize(float3(ddx, 1, ddy)); // Normal

	OUT.Position = mul(mWorldViewProj, P);

	// calculate texture coordinates for normal map lookup
	OUT.bumpCoord0.xy = IN.TexCoord*textureScale + time * bumpSpeed;
	OUT.bumpCoord1.xy = IN.TexCoord*textureScale * 2.0 + time * bumpSpeed * 4.0;
	OUT.bumpCoord2.xy = IN.TexCoord*textureScale * 4.0 + time * bumpSpeed * 8.0;

	OUT.eyeVector = P.xyz - eyePosition; // eye position in vertex space

//        OUT.oTexCoordProj = mul(mTextureMatrix, P);
//        OUT.oTexCoordProj.xy = float2(oTexCoordProj.x, -oTexCoordProj.y) * 0.5;
//        OUT.oTexCoordProj.xy = oTexCoordProj.xy / oTexCoordProj.w + float2(0.5, 0.5);

	return OUT;
}




struct v2f {
	float4 Position  : POSITION;  // in clip space
	float3 rotMatrix1 : TEXCOORD0; // first row of the 3x3 transform from tangent to obj space
	float3 rotMatrix2 : TEXCOORD1; // second row of the 3x3 transform from tangent to obj space
	float3 rotMatrix3 : TEXCOORD2; // third row of the 3x3 transform from tangent to obj space

	float2 bumpCoord0 : TEXCOORD3;
	float2 bumpCoord1 : TEXCOORD4;
	float2 bumpCoord2 : TEXCOORD5;

	float3 eyeVector  : TEXCOORD6;
};


void main_f(v2f IN,
			uniform sampler2D NormalMap,
			uniform sampler2D envMap,
//			uniform samplerCUBE EnvironmentMap,
                  uniform float day_multi,
                  out float4 oColor : COLOR0
			)
{
//const float4 deepColor = float4(0, 0.3, 0.5, 1.0);
//const float4 shallowColor = float4(0, 1, 1, 1.0);
const float4 deepColor = float4(0, 0.1, 0.5, 1.0);
const float4 shallowColor = float4(0, 0.5, 1, 1.0);
const float4 reflectionColor = float4(0.95, 1, 1, 1.0);
const float reflectionAmount = 1.0;
const float reflectionBlur = 0.0;
//const float waterAmount = 0.3;
const float waterAmount = 0.33;
const float fresnelPower = 5.0;
const float fresnelBias = 0.328;
const float hdrMultiplier = 0.471;
//const float hdrMultiplier = 0.271;

	// sum normal maps
	// sample from 3 different points so no texture repetition is noticeable
    float4 t0 = tex2D(NormalMap, IN.bumpCoord0) * 2.0 - 1.0;
    float4 t1 = tex2D(NormalMap, IN.bumpCoord1) * 2.0 - 1.0;
    float4 t2 = tex2D(NormalMap, IN.bumpCoord2) * 2.0 - 1.0;
    float3 N = t0.xyz + t1.xyz + t2.xyz;

    float3x3 m; // tangent to world matrix
    m[0] = IN.rotMatrix1;
    m[1] = IN.rotMatrix2;
    m[2] = IN.rotMatrix3;

    N = normalize( mul( N, m ) );

	// reflection
    float3 E = normalize(float3(1.0, -1.0, 0.0));//normalize(IN.eyeVector);
//    float4 R;
//    R.xyz = reflect(E, N);
    // Ogre conversion for cube map lookup
//    R.z = -R.z;
//    R.w = reflectionBlur;
//    float4 reflection = float4(0.5, 0.5, 0.5, 1);//texCUBEbias(EnvironmentMap, R);

    float3 R = normalize(reflect(E, N));
    R.xz = normalize(R.xz);
    R.y = (R.y * -0.5) + 0.5;
    float ex = ((R.x + R.z) + 1.415) / 2.83;
    if (R.x > R.z) ex = 1.0 - ex;
    float4 reflection = tex2D (envMap, float2(ex, R.y));
    // cheap hdr effect
//    reflection.rgb *= (reflection.r + reflection.g + reflection.b) * hdrMultiplier;

    // fresnel
    float facing = 1.0 - max(dot(-E, N), 0);
    float fresnel = saturate(fresnelBias + pow(facing, fresnelPower));

    float4 waterColor = lerp(shallowColor, deepColor, facing) * waterAmount;

    reflection = lerp(waterColor,  reflection * reflectionColor, fresnel) * reflectionAmount;
    
    oColor = day_effect(waterColor + reflection, float4(0,0,0,0), day_multi);
}
