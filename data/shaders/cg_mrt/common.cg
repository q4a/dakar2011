
float4 calculate_color(float4 color)
{
   const float4 color_shift = float4(0.7, 0.7, 0.7, 0.0);
   return color - color_shift;
}

float4 day_effect(float4 color, float4 pos, float pmulti)
{
   float4 ret;
   ret.a = color.a;
   ret.xyz = color.xyz * pmulti;
   return ret;
}


float attenuation( float3 P, 
                   float3 lightPos,
                   float day_multi) 
{
  float d = distance(P, lightPos);
  float dm = (1.1 - day_multi);
  return (20 * dm) / (d);
}

float dualConeSpotlight(float3 P,
                        float3 lightPos, 
                        float3 lightDir)
{
  float3 V = normalize(P - lightPos);
  float cosInnerCone = 0.2;
  float cosOuterCone = 0.7;
  float cosDirection = dot(V, normalize(lightDir));
  return smoothstep(cosInnerCone, 
                    cosOuterCone, 
                    cosDirection);
}

void spotAttenLighting( float3 lightPos, 
                        float3 lightDir,
                        float3 P,
                        float3 N,
                        float day_multi,
                        out float3 diffuseResult
                        ) 
{
  // Compute attenuation
  float attenuationFactor = attenuation(P, lightPos, day_multi);

  // Compute spotlight effect
  float spotEffect = dualConeSpotlight(P, lightPos, lightDir);

  diffuseResult = attenuationFactor * spotEffect + float3(1.0, 1.0, 1.0);
}


float4 calc_multip(float4 color, float m)
{
//  float multip = max(color.x, color.y);

//  multip = max(multip, color.z);

//  multip = 1.0 - multip;
//  multip = multip * 0.5;

//  return float4(multip, multip, multip, color.a);
    float3 ret = float3(1.0, 1.0, 1.0) - color.xyz;
    ret = ret * m;
    return float4(float3(1.0, 1.0, 1.0)-ret, color.a);
}


void coll_effect_xy(in float coll_tick_x, in float coll_tick_y, in out float4 oPosition)
{
    oPosition.z = oPosition.z + coll_tick_x;
    oPosition.x = oPosition.x + coll_tick_y;
}

float4 coll_effect_f(in float coll_tick, in sampler2D tex0, in float2 texCoord)
{
  float4 ret;
  if (coll_tick>-0.5)
  {
     float4 col0 = tex2D(tex0,texCoord);
     float4 col1 = tex2D(tex0,float2(texCoord.x + (cos(coll_tick)*0.01),
                                     texCoord.y + (sin(coll_tick)*0.01)));
     ret = lerp(col0, col1, 0.5);
  }
  else
  {
     ret = tex2D(tex0,texCoord);
  }
  return ret;
}

void add_fog_tra(in float3 eyePositionF, in float3 objPos, in out float4 oColor,
                 in float ov_limit, in float etick)
{
  const float atm = 40.0;
  const float addatm = 10.0;
  float fogDistance = distance(eyePositionF, objPos);
  float lov_limit = ov_limit-(atm+addatm);
  if (fogDistance <= lov_limit)
     fogDistance = 0.0;
  else
  {
     fogDistance -= lov_limit;
  }
  if (fogDistance >= atm)
  {
     fogDistance = atm;
  }
  float fogFactor = 1.0 - (fogDistance / atm);
  oColor.a = min(lerp(oColor.a, 0.0, 1.0 - fogFactor*fogFactor), oColor.a);
//  oColor.r = min(lerp(0.0, oColor.r, fogFactor*fogFactor), oColor.r);
/*
  // fog stuff  
  float fogDistance  = distance(eyePositionF, objPos);
  float heightFactor = 1.0;
  float lov_limit = ov_limit-100.0;
  if (fogDistance <= lov_limit)
     fogDistance = 0.0;
  else
  {
     fogDistance -= lov_limit;
     //heightFactor = (sin(objPos.y * etick) + 1.0) * 0.5 * (100.0 / fogDistance);
  }
  float fogExponent  = fogDistance * log2(1-0.03);
  float fogFactor   = exp2(-abs(fogExponent));
//  oColor.a = min(lerp(0.0, oColor.a, fogFactor), oColor.a) * heightFactor;
  oColor.r = min(lerp(0.0, oColor.r, fogFactor), oColor.r) * heightFactor;
*/
}

void add_shadow(in out float4 oColor, in float4 shadowCoeff)
{
    oColor.xyz *= shadowCoeff.xyz;
}

float4 calculate_shadow_ter(in float4 texCoordProj,
                        in sampler2D shadowMap,
                        in float shadowParam,
                        in float shadowRes,
                        in float day_multi
)
{
  const float4 nshadow = float4(1.0, 1.0, 1.0, 1.0);
  const float4 hshadow = float4(0.7, 0.7, 0.7, 1.0);
  float4 col = nshadow;

  float shd = tex2D(shadowMap, float2(texCoordProj.x, texCoordProj.y*shadowParam)).z;
  if (0<=texCoordProj.x && texCoordProj.x<=1.0 && 0<=texCoordProj.y && texCoordProj.y<=1.0 && shadowParam!=0.0 &&
       shd > 0.01)
  {
      const float cdm = ((day_multi-0.1)*1.1111);
      col = lerp(nshadow, hshadow, shd*cdm*cdm);
//      if (day_multi < 0.45)
//      {
//         float tds = (0.45 - day_multi)*2.0;
//         col.xyz = min(col.xyz + float3(tds, tds, tds), nshadow.xyz);
///         col.x = min(col.x + (0.45 - day_multi)*2.0, 1.0);
///         col.y = min(col.y + (0.45 - day_multi)*2.0, 1.0);
///         col.z = min(col.z + (0.45 - day_multi)*2.0, 1.0);
//      }
  }
  return col;
}

float4 calculate_shadow_ter2(in float4 texCoordProj,
                        in sampler2D shadowMap,
                        in float shadowParam,
                        in float shadowRes
)
{
  const float4 nshadow = float4(1.0, 1.0, 1.0, 1.0);
  const float4 hshadow = float4(0.7, 0.7, 0.7, 1.0);
  float4 col = nshadow;
  const float offset = 0.0007;

  float shd = tex2D(shadowMap, float2(texCoordProj.x, texCoordProj.y*shadowParam)).z;
  shd += tex2D(shadowMap, float2(texCoordProj.x+offset, texCoordProj.y*shadowParam)).z;
  shd += tex2D(shadowMap, float2(texCoordProj.x-offset, texCoordProj.y*shadowParam)).z;
  shd += tex2D(shadowMap, float2(texCoordProj.x, texCoordProj.y*shadowParam+offset)).z;
  shd *= 0.5;
  if (0<=texCoordProj.x && texCoordProj.x<=1.0 && 0<=texCoordProj.y && texCoordProj.y<=1.0 && shadowParam!=0.0 &&
       shd > 0.01)
  {
    col = lerp(nshadow, hshadow, shd*((day_multi-0.1)*1.1111));
  }
  return col;
}

float4 calculate_shadow_car(in float4 texCoordProj,
                        in sampler2D shadowMap,
                        in float shadowParam,
                        in float shadowRes,
                        in float3 lightPos,
                        in float3 objPos,
                        in float far_value,
                        in float day_multi
)
{
    const float4 nshadow = float4(1.0, 1.0, 1.0, 1.0);
    const float4 hshadow = float4(0.7, 0.7, 0.7, 1.0);
    float4 col = nshadow;
    float shd = tex2D(shadowMap, float2(texCoordProj.x, texCoordProj.y*shadowParam)).z - 0.5;

    if (0<=texCoordProj.x && texCoordProj.x<=1.0 && 0<=texCoordProj.y && texCoordProj.y<=1.0 && shadowParam!=0.0 &&
        shd > 0.01)
    {
        float d = distance (objPos, lightPos);
        if (shd < d / (far_value * 2.0 + 1.0))
        col = lerp(nshadow, hshadow, ((day_multi-0.1)*1.1111));
    }
    return col;
}

void add_stars(in float2 texCoord,
               in sampler2D tex,
               in out float4 oColor, in float day_multi)
{
    if (day_multi < 0.4)
    {
        oColor.xyz = oColor.xyz + (tex2D(tex, texCoord).xyz * ((0.4-day_multi)*3.5));
    }
}
