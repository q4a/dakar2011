#include "common.cg"

void main_v(float4 vPosition    : POSITION,
            float3 vNormal      : NORMAL,
            float2 Uv0          : TEXCOORD0,

            out float4 oPosition        : POSITION,
            out float4 color            : COLOR,
            out float2 oUv0             : TEXCOORD0,
            out float3 objPos           : TEXCOORD1,
            out float3 oNormal          : TEXCOORD2,
            out float4 oTexCoordProj    : TEXCOORD3,
            out float3 R                : TEXCOORD4,
            out float2 R2               : TEXCOORD5,

            uniform float4x4 mWorldViewProj,
            uniform float4x4 mWorld,
            uniform float4x4 mInvWorld,
            uniform float4x4 mTextureMatrix,
            uniform float3 mLightColor,
            uniform float3 mLightPos,
            uniform float3 eyePosition,
            uniform float shininess,
            uniform float car_engine_x,
            uniform float car_engine_y,
            uniform float coll_tick_x,
            uniform float coll_tick_y
)
{
    coll_effect_xy(coll_tick_x, coll_tick_y, vPosition);
    oPosition = mul(mWorldViewProj, vPosition);
    oUv0 = Uv0;
    oNormal = vNormal;
    objPos = mul(mWorld, vPosition).xyz;

    oTexCoordProj = mul(mTextureMatrix, vPosition);
    oTexCoordProj.xy = float2(oTexCoordProj.x, -oTexCoordProj.y) * 0.5;
    // no need for non d3d calculate shadow
    oTexCoordProj.xy = oTexCoordProj.xy / oTexCoordProj.w + float2(0.5, 0.5);

    oPosition.y = oPosition.y + car_engine_x;
    oPosition.x = oPosition.x + car_engine_y;

    float3 normal = mul(float4(vNormal,0.0), mInvWorld).xyz;

    // renormalize normal 
    normal = normalize(normal);

    float3 worldpos = objPos;

    // calculate light vector, vtxpos - lightpos
    float3 L = normalize(mLightPos - float3(0.0, 0.0, 0.0));
    float3 V = normalize(eyePosition - worldpos);
    float3 H = normalize(L + V);

    // calculate light color 
    float3 tmp = dot(normal, L);
    tmp.y = dot(normal, H); 
    tmp = lit(tmp.x, tmp.y, shininess);

    tmp = mLightColor * tmp.y * tmp.z;
    color = float4(tmp, 1.0);

    R = normalize(reflect(worldpos - eyePosition, normal));
    R.xz = normalize(R.xz);
    R.y = (R.y * -0.5) + 0.5;

    R2 = (float2(R.z, R.x)*-0.4*R.y+float2(0.5, 0.5));

    //R.yz = (R.yz * 0.5) + float2(0.5, 0.5);
    //R.x = R.x * 0.5;
    //R.z = (R.z * 0.5) + 0.5;
}

void main_f(float4 position     : POSITION,
            float4 color        : COLOR,
            float2 Uv0          : TEXCOORD0,
            float3 objPos       : TEXCOORD1,
            float3 normal       : TEXCOORD2,
            float4 texCoordProj : TEXCOORD3,
            float3 R            : TEXCOORD4,
            float2 R2           : TEXCOORD5,

            uniform sampler2D tex0      : register(s0),
            uniform sampler2D tex1      : register(s1),
            uniform sampler2D envMap    : register(s2),
            uniform sampler2D shadowMap : register(s3),

            uniform float3 clightPos,
            uniform float3 clightDir,
            //uniform float3 eyePositionF,
            uniform float3 lightPos,
            uniform float clight,
            uniform float brake,
            uniform float day_multi,
            uniform float shadowParam,
            uniform float shadowRes,
            uniform float far_value,
            uniform float car_dirt,

            out float4 oColor   : COLOR0,
            out float4 oColord  : COLOR1,
            out float4 oColorc  : COLOR2
)
{
    float4 col = tex2D (tex0, Uv0);
    float dirt = 1.0 - (tex2D(tex1, Uv0)).r;
    float3 diffuseLight = float3(0.0, 0.0, 0.0);
    float4 shadowCoeff = calculate_shadow_car(texCoordProj, shadowMap, shadowParam, shadowRes, lightPos, objPos, far_value, day_multi);
    float ex = ((R.x + R.z) + 1.415) / 2.83;
    if (R.x > R.z) ex = 1.0 - ex;

    float shaenv = tex2D (shadowMap, R2).z;
    if (shaenv < 0.02 || shaenv > 0.64)
      shaenv = 1.0;
    else
      shaenv = 0.0;

    float4 colenv = tex2D (envMap, float2(ex, R.y)) * 0.8 * shaenv;

    col.xyz = (color.xyz + float3(0.2, 0.2, 0.2)) * col.xyz;
    col.xyz *= 2.0;
    col.xyz = lerp(col.xyz, colenv.xyz, 0.3+((1.0-car_dirt)*(1.0-shaenv)*0.2)-(car_dirt*0.2));
    col.xyz = lerp(col.xyz, float3(0.18,0.1,0.04), dirt);

    oColor = col;
    oColor.a = 1.0;

    if (clight>0.0)
    {
        spotAttenLighting(clightPos, clightDir, objPos, normal, day_multi, diffuseLight);
        oColor.xyz = oColor.xyz * diffuseLight;
    }

    oColor = day_effect(oColor, position, day_multi);
    add_shadow(oColor, shadowCoeff);

    oColord = float4(0.0, 0.0, 0.0, 1.0);
    oColorc = calculate_color(color * (day_multi));
    add_shadow(oColorc, shadowCoeff * shadowCoeff);
}
