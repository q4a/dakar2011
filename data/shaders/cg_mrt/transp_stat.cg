#include "common.cg"

void main_v(float4 position : POSITION,
            float3 normal   : NORMAL,
            float2 Uv       : TEXCOORD0,

            out float4 oPosition    : POSITION,
            out float4 color        : COLOR0,
            out float2 oUv          : TEXCOORD0,
            out float3 objPos       : TEXCOORD1,
            out float3 oNormal      : TEXCOORD2,

            uniform float4x4 mWorldViewProj,
            uniform float4x4 mWorld
)
{
    oPosition = mul(mWorldViewProj, position);
    oUv = Uv;
    objPos = position.xyz;
    oNormal = normal;
}


struct fragment
{
    float4 position     : POSITION;
    float4 color0       : COLOR0;
    float2 texcoord0    : TEXCOORD0;
    float3 objPos       : TEXCOORD1;
    float3 normal       : TEXCOORD2;
};

struct pixel
{
    float4 color    : COLOR0;
    float4 colord   : COLOR1;
    float4 colorc   : COLOR2;
};

pixel main_f(fragment IN,

             uniform sampler2D tex0 : register(s0),

             uniform float param,
             uniform float3 clightPos,
             uniform float3 clightDir,
             uniform float3 eyePositionF,
             uniform float clight,
             uniform float day_multi,
             uniform float ov_limit,
             uniform float etick
)
{
    pixel OUT;

    float4 col = tex2D( tex0, IN.texcoord0 );
    float3 diffuseLight = float3(0.0, 0.0, 0.0);

    clip(col.a - param);

    if (clight>0.0)
    {
        spotAttenLighting(clightPos, clightDir, IN.objPos, IN.normal, day_multi, diffuseLight);
        col.xyz = col.xyz * diffuseLight;
    }

    // fog stuff
    add_fog_tra(eyePositionF, IN.objPos, col, ov_limit, etick);

    OUT.color = day_effect(col, IN.position, day_multi);
    OUT.colord = float4(0, 0, 1.0, 1.0);
    OUT.colorc = calculate_color(float4(0.5, 0.5, 0.5, col.a) * (day_multi)); // IN.color0;

    return OUT;
}
